// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_DEV")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id                String    @id @default(cuid())
  name              String?
  firstName         String?
  lastName          String?
  email             String?   @unique
  emailVerified     DateTime? @map("email_verified")
  password          String?
  createdAt         DateTime  @default(now())
  updatedAt        DateTime  @default(now()) @updatedAt    @map("updated_at")    
  image             String?
  promotion         String?
  birthdate         DateTime?
  company           String?
  role              String    @default("utilisateur") @map("role")
  isAdherent        Boolean   @default(false) @map("is_adherent")
  isAlumni          Boolean   @default(false) @map("is_alumni")
  adhesionStart     DateTime? @map("adhesion_start")
  adhesionEnd       DateTime? @map("adhesion_end")
  lastLoginAt      DateTime?  @map("last_login_at")        // nullable
  inactiveWarnedAt DateTime?  @map("inactive_warned_at")   // nullable

  // Relations
  accounts               Account[]
  sessions               Session[]
  alumniRequests         AlumniRequest[]
  passwordResetTokens    PasswordResetToken[]
  teamMembers            BdeTeamMember[]
  createdEvents          Event[]
  uploadedCourses        Cours[]
  uploadedPhotos         GalleryPhoto[]
  adhesions              Adhesion[]
  internshipVisits       InternshipVisit[] @relation("UserVisits")
  internshipSpotsCreated InternshipSpot[]  @relation("UserCreatedSpots")
 
  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model AlumniRequest {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  diplome         String
  anneeObtention  Int      @map("annee_obtention")
  statut          String   @default("en_attente") @map("statut") // 'en_attente' | 'valide' | 'refuse'
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("alumni_requests")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model BdeTeam {
  id          String   @id @default(cuid())
  annee       String   @unique // ex: "2024-2025"
  description String   @db.Text
  image       String?
  createdAt   DateTime @default(now()) @map("created_at")
  isActive    Boolean  @default(false) @map("is_active")

  // Relations
  members BdeTeamMember[]

  @@map("bde_teams")
}

model BdeTeamMember {
  id          String  @id @default(cuid())
  teamId      String  @map("team_id")
  userId      String  @map("user_id")
  poste       String
  photo       String?
  description String? @db.Text

  // Relations
  team BdeTeam @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("bde_team_members")
}

model Event {
  id              String   @id @default(cuid())
  title           String
  description     String   @db.Text
  date            DateTime
  location        String?
  inscriptionLink String?  @map("inscription_link")
  image           String?
  isActive    Boolean  @default(false) @map("is_active")
  createdBy       String   @map("created_by")
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  creator    User        @relation(fields: [createdBy], references: [id])
  eventPages EventPage[]

  @@map("events")
}

model EventPage {
  id          String   @id @default(cuid())
  eventId     String   @map("event_id")
  slug        String   @unique
  contentHtml String?  @map("content_html") @db.Text
  contentJson String?  @map("content_json") @db.Text
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_pages")
}

model GalleryEvent {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  isActive    Boolean  @default(false) @map("is_active")
  coverImage  String?  @map("cover_image")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  photos GalleryPhoto[]

  @@map("gallery_events")
}

model GalleryPhoto {
  id              String  @id @default(cuid())
  galleryEventId  String  @map("gallery_event_id")
  imagePath       String  @map("image_path")
  caption         String?
  hasImageRights  Boolean @default(true) @map("has_image_rights")
  uploadedBy      String  @map("uploaded_by")

  // Relations
  galleryEvent GalleryEvent @relation(fields: [galleryEventId], references: [id], onDelete: Cascade)
  uploader     User         @relation(fields: [uploadedBy], references: [id])

  @@map("gallery_photos")
}

model Formation {
  id   String @id @default(cuid())
  nom  String @unique

  // Relations
  semestres Semestre[]

  @@map("formations")
}

model Semestre {
  id          String @id @default(cuid())
  formationId String @map("formation_id")
  semestre    String // ex: "S5", "S6", etc.

  // Relations
  formation Formation @relation(fields: [formationId], references: [id], onDelete: Cascade)
  ues       Ue[]

  @@unique([formationId, semestre])
  @@map("semestres")
}

model Ue {
  id         String  @id @default(cuid())
  semestreId String  @map("semestre_id")
  ueNumber   Int     @map("ue_number") // 1 à 5
  nomUe      String? @map("nom_ue")

  // Relations
  semestre Semestre  @relation(fields: [semestreId], references: [id], onDelete: Cascade)
  matieres Matiere[]

  @@unique([semestreId, ueNumber])
  @@map("ues")
}

model Matiere {
  id          String @id @default(cuid())
  ueId        String @map("ue_id")
  nomMatiere  String @map("nom_matiere")

  // Relations
  ue    Ue     @relation(fields: [ueId], references: [id], onDelete: Cascade)
  cours Cours[]

  @@map("matieres")
}

model Cours {
  id          String   @id @default(cuid())
  matiereId   String   @map("matiere_id")
  title       String
  description String?  @db.Text
  filePath    String   @map("file_path")
  uploadedBy  String   @map("uploaded_by")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  matiere  Matiere @relation(fields: [matiereId], references: [id], onDelete: Cascade)
  uploader User    @relation(fields: [uploadedBy], references: [id])

  @@map("cours")
}

model Adhesion {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  anneeScolaire     String   @map("annee_scolaire") // ex: "2024-2025"
  modePaiement      String   @map("mode_paiement") // 'en_ligne' | 'liquide'
  paiementConfirme  Boolean  @default(false) @map("paiement_confirme")
  createdAt         DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, anneeScolaire])
  @@map("adhesions")
}

model SiteConfig {
  id              String @id @default(cuid())
  adhesionTarif   Float  @map("adhesion_tarif")
  reseauxSociaux  String @map("reseaux_sociaux") @db.Text // JSON string
  mailContact     String @map("mail_contact")

  @@map("site_config")
}

model InternshipSpot {
  id           String   @id @default(cuid())
  title        String
  companyName  String
  address      String
  city         String?
  countryCode  String
  countryName  String?
  lat          Float
  lng          Float
  contactEmail String?
  website      String?
  description  String?  @db.Text
  approved     Boolean  @default(false)

  createdBy    String   @map("created_by")
  // ← relation nommée "UserCreatedSpots"
  createdByUser User    @relation("UserCreatedSpots", fields: [createdBy], references: [id])

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  visits       InternshipVisit[]

  @@index([lat, lng])
  @@index([countryCode])
}

model InternshipVisit {
  id        String   @id @default(cuid())
  spotId    String
  userId    String?              // facultatif si on autorise des retours anonymisés
  year      Int?
  rating    Int?
  comment   String?  @db.Text
  createdAt DateTime @default(now())

  spot InternshipSpot @relation(fields: [spotId], references: [id], onDelete: Cascade)

  // ← relation nommée "UserVisits"
  user User? @relation("UserVisits", fields: [userId], references: [id])
}

model Partner {
  id          String   @id @default(cuid())
  name        String
  logoUrl     String?  // URL vers le logo (hébergé où vous voulez pour l’instant)
  website     String?  // lien vers le site du partenaire
  description String?  @db.Text
  active      Boolean  @default(true)
  order       Int      @default(0)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([active, order])
}

model JobState {
  key       String   @id
  lastRunAt DateTime?
  lockedAt  DateTime?
  lockedBy  String?
  @@map("job_state")
}
